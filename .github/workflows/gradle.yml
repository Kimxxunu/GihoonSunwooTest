# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Spring Boot & Gradle CI/CD

# release 브랜치에 push 또는 pull request가 되면 스크립트 실행
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ main ]

# 해당 코드에서 사용될 변수 설정
env:
  AWS_REGION: ap-northeast-2
  PROJECT_NAME: NiceTest
  S3_BUCKET_NAME: github-actions-s3-bucket-sunwoo
  CODE_DEPLOY_APP_NAME: spring-boot-codedeploy-app-test
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: spring-boot-codedeploy-test-group
  AWS_ACCESS_KEY_ID: AKIA45XEROLPFPEDZX6Y
  AWS_SECRET_ACCESS_KEY: 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

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

          # create application.yml1
      - name: make application-aws.yml
        if: contains(github.ref, 'release')
        run: |
          # spring의 resources 경로로 이동
          cd ./src/main/resources
          
          ls -al
          touch ./application-aws.yml
          
          # GitHub-Actions에서 설정한 값을 application-aws.yml 파일에 쓰기
          echo "AKIA45XEROLPFPEDZX6Y" > ./application-aws.yml
          echo "${{ secrets.PcDey2yYmX5ALA6jYEQ7VpM_Hh_KPsMPePlmrvCG }}" >> ./application-aws.yml
        shell: bash

      # create key.p8 file
      - name: make apple key.p8 file
        if: contains(github.ref, 'release')
        run: |
          # spring의 resources 경로로 이동
          mkdir ./src/main/resources/key
          cd ./src/main/resources/key
          
          ls -al
          touch ./AuthKey.p8
          
          # GitHub-Actions에서 설정한 값 파일에 쓰기
          echo "AKIA45XEROLPFPEDZX6Y" > ./AuthKey.p8
          echo "${{ secrets.PcDey2yYmX5ALA6jYEQ7VpM_Hh_KPsMPePlmrvCG }}" >> ./AuthKey.p8
        shell: bash

      # gradlew 파일 실행권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # Gradle build (Test 제외)
      - name: Build with Gradle
        run: ./gradlew clean --stacktrace --info build
        shell: bash


      # 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://${{ env.S3_BUCKET_NAME }}/${{ github.sha }}.zip \
            --source .

      # S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=${{ env.S3_BUCKET_NAME }},key=${{ github.sha }}.zip,bundleType=zip
      
      
      
